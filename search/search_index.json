{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter Markdown Pages Documentation","text":"<p>This library allows you to easily work with markdown based files, located in directories in the CodeIgniter 4 framework.</p>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Configuration</li> <li>Basic usage</li> <li>Classes<ul> <li>Dir</li> <li>File</li> <li>Content</li> <li>Results</li> <li>Result</li> </ul> </li> </ul>"},{"location":"basic_usage/","title":"Basic usage","text":"<ul> <li>New Instance</li> <li>Main Methods<ul> <li>dirs()</li> <li>dir()</li> <li>search()</li> <li>file()</li> </ul> </li> <li>Helper Methods<ul> <li>depth()</li> <li>parent()</li> </ul> </li> </ul>"},{"location":"basic_usage/#new-instance","title":"New Instance","text":"<p>To create new instance we simply have to call our service along with the folder we want to work with:</p> <pre><code>$markdownPages = service('markdownpages', ROOTPATH . 'pages');</code></pre> <p>In many places we use Collection to work with the data. If you're not familiar with the idea of collections, please get familiar with it to use this package comfortably.</p>"},{"location":"basic_usage/#main-methods","title":"Main Methods","text":"<p>These methods are used to retrieve information about the elements inside the folder with which we created an instance.</p> <p>This directory structure will be a good reference for explaining of how things work.</p> <pre><code>\u2514\u2500\u2500 pages\n    \u251c\u2500\u2500 1_quick-start\n    \u2502   \u251c\u2500\u2500 1_installation.md\n    \u2502   \u251c\u2500\u2500 2_database-migration.md\n    \u2502   \u251c\u2500\u2500 what-next.md\n    \u2502   \u2514\u2500\u2500 subfolder\n    \u2502       \u2514\u2500\u2500 one-file.md\n    \u2514\u2500\u2500 first-steps\n        \u251c\u2500\u2500 how-to-use-this.md\n        \u2514\u2500\u2500 second-file.md</code></pre> <p>As you may notice some folders and files are prefixed with the number. This number is used strictly for ordering purposes and is not used when determining the <code>slug</code> or <code>path</code> for the directories and files.</p> <p>Note</p> <p>Folders and files names are supposed to include only alphanumeric characters in ASCII and dashes.</p> <p>Warning</p> <p>Underscores are reserved to postfix the sorting number, which (when avaliable) should be always at the beginning.</p>"},{"location":"basic_usage/#dirs","title":"dirs()","text":"<p>This method allow us to retrieve the folders we loaded. There are a couple of ways to specify the directory we're looking for.</p>"},{"location":"basic_usage/#parameters","title":"Parameters","text":"<ul> <li><code>$path</code> (optional) - We can use:<ul> <li>The default <code>null</code> value. To get all the folders.</li> <li>A simple string: <code>'quick-start/subfolder'</code>, to get the certain folder.</li> <li>A string with wildcard: <code>'quick-start*'</code>, to get all the folders that include this path.</li> <li>An array of folders: <code>['quick-start/subfolder', 'first-steps']</code>, to get may folders.</li> </ul> </li> </ul>"},{"location":"basic_usage/#examples","title":"Examples","text":"<p>This method will always return a Collection of folders (<code>Dir</code> classes). Learn more about the Dir class.</p> <pre><code>// returns Collection class with Dir classes\n$markdownPages-&gt;dirs();</code></pre> <p>This will return a Collection of all folders that belongs to given folder path wildcard. In this case: <code>quick-start</code> and <code>subfolder</code>.</p> <pre><code>// returns Collection class with Dir classes\n$markdownPages-&gt;dirs('quick-start*');</code></pre> <p>We can also use helper methods to make more complicated operations.</p> <p>This will return a Collection of all folders that belongs to given folder path wildcard and are at the given depth. The result will include: <code>subfolder</code>.</p> <pre><code>// returns Collection class with Dir classes\n$markdownPages-&gt;depth([2])-&gt;dirs('quick-start*');</code></pre> <p>We can also retrieve folders based on the parent folder. This will return a Collection with the <code>subfolder</code>.</p> <pre><code>// returns Collection class with Dir classes\n$markdownPages-&gt;parent('quick-start')-&gt;dirs();</code></pre>"},{"location":"basic_usage/#dir","title":"dir()","text":"<p>This method works the same way as <code>dirs()</code>, but instead of returning a Collection of <code>Dir</code> classes it will return a single <code>Dir</code> class or <code>null</code> if nothing can be found.</p> <p>It will also not accept the <code>null</code> value as a parameter.</p>"},{"location":"basic_usage/#parameters_1","title":"Parameters","text":"<ul> <li><code>$path</code> - We can use:<ul> <li>A simple string: <code>'quick-start/subfolder'</code>, to get the certain folder.</li> <li>A string with wildcard: <code>'quick-start*'</code>, to get all the folders that include this path.</li> <li>An array of folders: <code>['quick-start/subfolder', 'first-steps']</code>, to get may folders.</li> </ul> </li> </ul>"},{"location":"basic_usage/#examples_1","title":"Examples","text":"<pre><code>// returns Dir class or null\n$dir = $markdownPages-&gt;dir('quick-start/subfolder');\n// returns \"Subfolder\"\n$dir-&gt;getName();\n// returns 2\n$dir-&gt;getDepth();\n// returns \"quick-start\"\n$dir-&gt;getParent();\n// returns Collection of File classes\n$dir-&gt;getFiles();</code></pre> <p>When using a wildcard or any other parameter that can result in matching multiple folders, the first one is returned.</p> <p>Learn more about the Dir class.</p>"},{"location":"basic_usage/#search","title":"search()","text":"<p>This method will search for a given sentence and return a <code>Results</code> class. The search will occur in a couple of places:</p> <ul> <li>The file name.</li> <li>The content of the markdown file.</li> <li>And optionally in the YAML content. To make this work, we have to specify which YAML <code>keys</code> should be taken into consideration.</li> </ul>"},{"location":"basic_usage/#parameters_2","title":"Parameters","text":"<ul> <li><code>$query</code> - The search query.</li> <li><code>$path</code> (optional) - We can use:<ul> <li>The default <code>null</code> value. To get all the folders.</li> <li>A simple string: <code>'quick-start/subfolder'</code>, to get the certain folder.</li> <li>A string with wildcard: <code>'quick-start*'</code>, to get all the folders that include this path.</li> <li>An array of folders: <code>['quick-start/subfolder', 'first-steps']</code>, to get may folders.</li> </ul> </li> <li><code>$metaKeys</code> (optional) - An array of meta keys to be considered when searching for a query. You have to use YAML part in your files to make it work. Default value: <code>[]</code> (empty array)</li> </ul>"},{"location":"basic_usage/#examples_2","title":"Examples","text":"<pre><code>// search for \"file\" keyword\n$markdownPages-&gt;search('file');\n// or with metaKeys if we're using YAML with those keys\n$results = $markdownPages-&gt;search('file', ['title', 'description']);\n// returns the search query: \"file\"\n$results-&gt;getQuery();\n// returns the Collection with Result class\n$results-&gt;getResults();</code></pre> <p>Learn more about the Result class.</p> <p>The search is case-insensitive. It's very basic and count the number of occurrences for the searched word. The number of occurrences is used to order the results.</p> <p>The above search should return 2 results, for: <code>one-file.md</code> and <code>second-file.md</code>.</p> <p>We can also use <code>search()</code> with other helper methods:</p> <pre><code>$markdownPages-&gt;depth([2])-&gt;search('file');</code></pre> <p>The above will return only 1 result: <code>one-file.md</code>. The next example will also return only one result, but it will be <code>second-file.md</code>.</p> <pre><code>$markdownPages-&gt;parent('')-&gt;search('file');</code></pre> <p>Note</p> <p>Both methods (<code>depth()</code> and <code>parent()</code>) refer as in previous cases to the folder where the file is located, not to the file itself.</p> <p>Learn more about the Results class.</p>"},{"location":"basic_usage/#file","title":"file()","text":"<p>This method is used to load the file to the <code>File</code> class.</p>"},{"location":"basic_usage/#parameters_3","title":"Parameters","text":"<ul> <li><code>$path</code> - The full getPath which includes parent folder path and file slug.</li> </ul>"},{"location":"basic_usage/#examples_3","title":"Examples","text":"<pre><code>$file = $markdownPages-&gt;file('first-steps/second-file');\n// returns \"Second File\"\n$file-&gt;getName();\n// returns parsed markdown\n$file-&gt;parse()-&gt;getContent();</code></pre> <p>Learn more about the File class.</p>"},{"location":"basic_usage/#helper-methods","title":"Helper Methods","text":"<p>These helper methods allow you to change the behavior of the methods: <code>dirs()</code>, <code>dir()</code> and <code>search()</code>.</p>"},{"location":"basic_usage/#depth","title":"depth()","text":"<p>It will act differently depending on what value will be passed.</p>"},{"location":"basic_usage/#parameters_4","title":"Parameters","text":"<ul> <li><code>$depth</code> - It can be:<ul> <li>int - will include all folders that depth is smaller than provided value (including that number).</li> <li>array - will include folders only from given depth.</li> </ul> </li> </ul>"},{"location":"basic_usage/#examples_4","title":"Examples","text":"<p>The example below will select <code>Dir</code> classes: <code>quick-start</code> and <code>first-steps</code>.</p> <pre><code>$markdownPages-&gt;depth(1);\n// this is an equivalent of above\n$markdownPages-&gt;depth([0, 1]);</code></pre>"},{"location":"basic_usage/#parent","title":"parent()","text":"<p>It will act differently depending on what value will be passed.</p>"},{"location":"basic_usage/#parameters_5","title":"Parameters","text":"<ul> <li><code>$parent</code> - It can be:<ul> <li>string - will include folders only with that parent.</li> <li>string with wildcard - will include all the folders which parent match the pattern.</li> <li>array - will include all folders which has parent listed in the array</li> </ul> </li> </ul>"},{"location":"basic_usage/#examples_5","title":"Examples","text":"<p>This will select the <code>Dir</code> class with folder <code>subfolder</code>.</p> <pre><code>// string\n$markdown-&gt;parent('quick-start');</code></pre> <p>This will select <code>Dir</code> classes with folder <code>quick-start</code> and <code>subfolder</code>.</p> <pre><code>// string with wildcard\n$markdown-&gt;parent('quick-start*');</code></pre> <p>This will select the <code>Dir</code> class with folder <code>subfolder</code>.</p> <pre><code>// array\n$markdown-&gt;parent(['quick-start']);</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>To make changes to the config file, we have to have our copy in the <code>app/Config/MarkdownPages.php</code>. Luckily, this package comes with handy command that will make this easy.</p> <p>When we run:</p> <pre><code>php spark markdownpages:publish</code></pre> <p>We will get our copy ready for modifications.</p> <p>Available options:</p> <ul> <li>$yamlParser</li> <li>$markdownParser</li> <li>$fileExtension</li> </ul>"},{"location":"configuration/#yamlparser","title":"$yamlParser","text":"<p>The class that will be used to parse YAML part of the file.</p> <p>You're not required to include YAML to your file, though.</p> <p>Default value: <code>null</code>.</p> <p>With the default value, symfony/yaml package is used.</p>"},{"location":"configuration/#markdownparser","title":"$markdownParser","text":"<p>The class that will be used to parse Markdown part of the file.</p> <p>Default value: <code>null</code>.</p> <p>With the default value, league/commonmark package is used.</p>"},{"location":"configuration/#fileextension","title":"$fileExtension","text":"<p>The files with only this extension will be considered when mapping the directories.</p> <p>Default value: <code>md</code>.</p>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Composer Installation</li> <li>Manual Installation</li> </ul>"},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer michalsn/codeigniter-markdown-pages</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>In the example below we will assume, that files from this project will be located in <code>app/ThirdParty/markdown-pages</code> directory.</p> <p>Download this project and then enable it by editing the <code>app/Config/Autoload.php</code> file and adding the <code>Michalsn\\CodeIgniterMarkdownPages</code> namespace to the <code>$psr4</code> array, like in the below example:</p> <pre><code>&lt;?php\n\n// ...\n\npublic $psr4 = [\n    APP_NAMESPACE =&gt; APPPATH, // For custom app namespace\n    'Config'      =&gt; APPPATH . 'Config',\n    'Michalsn\\CodeIgniterMarkdownPages' =&gt; APPPATH . 'ThirdParty/markdown-pages/src',\n];\n\n// ...</code></pre> <p>The last thing - you still have to install additional libraries via composer:</p> <pre><code>composer mnapoli/front-yaml myth/collection</code></pre>"},{"location":"classes/content/","title":"Content class","text":"<p>The <code>Content</code> class represents the single file content.</p>"},{"location":"classes/content/#getcontent","title":"getContent()","text":"<p>Returns the parsed markdown part of the file.</p>"},{"location":"classes/content/#getmeta","title":"getMeta()","text":"<p>Returns the parsed YAML part of the file.</p>"},{"location":"classes/content/#parameters","title":"Parameters","text":"<ul> <li><code>$key</code> (optional) - Determine what meta key should be returned. Returns all the keys when set to <code>null</code>. Default value: <code>null</code>.</li> </ul>"},{"location":"classes/content/#hasmetakey","title":"hasMetaKey()","text":"<p>Returns <code>true</code> or <code>false</code> depending on whether the given key exists.</p>"},{"location":"classes/content/#parameters_1","title":"Parameters","text":"<ul> <li><code>$key</code> - The key for the meta array.</li> </ul>"},{"location":"classes/dir/","title":"Dir class","text":"<p>The <code>Dir</code> class represents the single folder.</p>"},{"location":"classes/dir/#getname","title":"getName()","text":"<p>The \"humanized\" folder name.</p>"},{"location":"classes/dir/#getslug","title":"getSlug()","text":"<p>The directory name slug. Without optional prefixes used for ordering.</p>"},{"location":"classes/dir/#getpath","title":"getPath()","text":"<p>The parent directory path and current folder slug.</p>"},{"location":"classes/dir/#getdepth","title":"getDepth()","text":"<p>The depth of the directory in the tree.</p>"},{"location":"classes/dir/#getparent","title":"getParent()","text":"<p>The parent directory path.</p>"},{"location":"classes/dir/#hasparent","title":"hasParent()","text":"<p>Returns <code>true</code> or <code>false</code> depending on whether the parent exists or not.</p>"},{"location":"classes/dir/#getchildren","title":"getChildren()","text":"<p>Returns an array of children folders in slug format.</p>"},{"location":"classes/dir/#haschildren","title":"hasChildren()","text":"<p>Returns <code>true</code> or <code>false</code> depending on whether children exists or not.</p>"},{"location":"classes/dir/#getfiles","title":"getFiles()","text":"<p>Returns the Collection of <code>File</code> classes or empty Collection.</p> <p>Learn more about the File class.</p>"},{"location":"classes/dir/#hasfiles","title":"hasFiles()","text":"<p>Returns <code>true</code> or <code>false</code> depending on whether files exists or not.</p>"},{"location":"classes/dir/#getdirname","title":"getDirName()","text":"<p>The directory name as it is in the file system.</p>"},{"location":"classes/file/","title":"File class","text":"<p>The <code>File</code> class represents the single file.</p>"},{"location":"classes/file/#getname","title":"getName()","text":"<p>The \"humanized\" file name.</p>"},{"location":"classes/file/#getslug","title":"getSlug()","text":"<p>The file name as a slug. Without optional prefixes used for ordering.</p>"},{"location":"classes/file/#getpath","title":"getPath()","text":"<p>The directory name path with file slug.</p>"},{"location":"classes/file/#getdepth","title":"getDepth()","text":"<p>The depth of the file in the tree. Based on a parent folder.</p>"},{"location":"classes/file/#getfilename","title":"getFileName()","text":"<p>The file name as it is in the file system.</p>"},{"location":"classes/file/#getdirname","title":"getDirName()","text":"<p>The directory name as it is in the file system.</p>"},{"location":"classes/file/#getdirnamepath","title":"getDirNamePath()","text":"<p>The directory name path. Without optional prefixes used for ordering.</p>"},{"location":"classes/file/#load","title":"load()","text":"<p>Returns the raw content of the file.</p>"},{"location":"classes/file/#parameters","title":"Parameters","text":"<ul> <li><code>$throw</code> (optional) - Determine whether throw an exception if the file doesn't exist. Default value: <code>false</code>.</li> </ul>"},{"location":"classes/file/#parse","title":"parse()","text":"<p>Returns the <code>Content</code> class for a file. Learn more about the Content class.</p>"},{"location":"classes/file/#parameters_1","title":"Parameters","text":"<ul> <li><code>$parseMarkdown</code> (optional) - Determine whether parse the markdown part of the file. Default value: <code>true</code>.</li> </ul>"},{"location":"classes/file/#search","title":"search()","text":"<p>Returns the \"score\" for the searched query. Usually not used individually with a file.</p>"},{"location":"classes/file/#parameters_2","title":"Parameters","text":"<ul> <li><code>$query</code> - The search query.</li> <li><code>$metaKeys</code> (optional) - An array of keys to be included in the search mechanism. Default value: <code>[]</code> (empty array).</li> </ul>"},{"location":"classes/result/","title":"Result class","text":"<p>The <code>Result</code> class holds the <code>File</code> class and the score for \"quality\" of the search.</p>"},{"location":"classes/result/#getfile","title":"getFile()","text":"<p>Get the <code>File</code> class instance for the given file.</p>"},{"location":"classes/result/#getscore","title":"getScore()","text":"<p>Get the score that determines the quality of the search. The higher, the better.</p>"},{"location":"classes/results/","title":"Results class","text":"<p>The <code>Results</code> class handles the results from the <code>search()</code> method.</p>"},{"location":"classes/results/#getquery","title":"getQuery()","text":"<p>Get the query used for searching.</p>"},{"location":"classes/results/#getresults","title":"getResults()","text":"<p>Get the Collection with the <code>Result</code> classes. Learn more about the Result class.</p>"},{"location":"classes/results/#sortbyscore","title":"sortByScore()","text":"<p>Sorts the results by score.</p>"},{"location":"classes/results/#parameters","title":"Parameters","text":"<ul> <li><code>$sort</code> (optional) - Determine the order for results.<ul> <li><code>ScoreSortOrder::ASC</code> - Ascending order</li> <li><code>ScoreSortOrder::DESC</code> - Descending order (default)</li> </ul> </li> </ul>"}]}